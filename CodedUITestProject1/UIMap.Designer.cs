// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Enters a string for Full Name and an int for Num1 and Num2
        /// </summary>
        public void enterStringAndTwoInts()
        {
            #region Variable Declarations
            WpfEdit uIEnterFullNameEdit = this.UIMainWindowWindow.UIEnterFullNameEdit;
            WpfEdit uIEnterNum1Edit = this.UIMainWindowWindow.UIEnterNum1Edit;
            WpfEdit uIEnterNum2Edit = this.UIMainWindowWindow.UIEnterNum2Edit;
            WpfButton uIGetMagicNumberButton = this.UIMainWindowWindow.UIGetMagicNumberButton;
            #endregion

            // Type 'Phillip Wolf' in 'enterFullName' text box
            uIEnterFullNameEdit.Text = this.enterStringAndTwoIntsParams.UIEnterFullNameEditText;

            // Type '{CapsLock}' in 'enterFullName' text box
            Keyboard.SendKeys(uIEnterFullNameEdit, this.enterStringAndTwoIntsParams.UIEnterFullNameEditSendKeys, ModifierKeys.None);

            // Type '10' in 'enterNum1' text box
            uIEnterNum1Edit.Text = this.enterStringAndTwoIntsParams.UIEnterNum1EditText;

            // Type '10' in 'enterNum2' text box
            uIEnterNum2Edit.Text = this.enterStringAndTwoIntsParams.UIEnterNum2EditText;

            // Click 'Get Magic Number!' button
            Mouse.Click(uIGetMagicNumberButton, new Point(67, 10));
        }
        
        /// <summary>
        /// Asserts the results when Get Magic Number! is pressed
        /// </summary>
        public void AssertResults()
        {
            #region Variable Declarations
            WpfText uIPhillipWolfText = this.UIMainWindowWindow.UIPhillipWolfText;
            WpfText uIItem25Text = this.UIMainWindowWindow.UIItem25Text;
            WpfText uIItem20Text = this.UIMainWindowWindow.UIItem20Text;
            WpfText uIItem100Text = this.UIMainWindowWindow.UIItem100Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Phillip Wolf' label equals 'Phillip Wolf'
            Assert.AreEqual(this.AssertResultsExpectedValues.UIPhillipWolfTextDisplayText, uIPhillipWolfText.DisplayText, "Results name did not match entered name");

            // Verify that the 'DisplayText' property of '25' label equals '25'
            Assert.AreEqual(this.AssertResultsExpectedValues.UIItem25TextDisplayText, uIItem25Text.DisplayText, "Magic Number was not equal to Num1 + Num2 + 5");

            // Verify that the 'DisplayText' property of '20' label equals '20'
            Assert.AreEqual(this.AssertResultsExpectedValues.UIItem20TextDisplayText, uIItem20Text.DisplayText, "Added result was not equal to Num1 + Num2");

            // Verify that the 'DisplayText' property of '100' label equals '100'
            Assert.AreEqual(this.AssertResultsExpectedValues.UIItem100TextDisplayText, uIItem100Text.DisplayText, "Multipled result did not equal Num1 * Num2");
        }
        
        /// <summary>
        /// Closes the app
        /// </summary>
        public void closeApplication()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 4));
        }
        
        /// <summary>
        /// Opens the app
        /// </summary>
        public void openApplication()
        {

            // Launch '%USERPROFILE%\Desktop\myApp\WpfApplication1.exe'
            ApplicationUnderTest wpfApplication1Application = ApplicationUnderTest.Launch(this.openApplicationParams.ExePath, this.openApplicationParams.AlternateExePath);
        }
        
        #region Properties
        public virtual enterStringAndTwoIntsParams enterStringAndTwoIntsParams
        {
            get
            {
                if ((this.menterStringAndTwoIntsParams == null))
                {
                    this.menterStringAndTwoIntsParams = new enterStringAndTwoIntsParams();
                }
                return this.menterStringAndTwoIntsParams;
            }
        }
        
        public virtual AssertResultsExpectedValues AssertResultsExpectedValues
        {
            get
            {
                if ((this.mAssertResultsExpectedValues == null))
                {
                    this.mAssertResultsExpectedValues = new AssertResultsExpectedValues();
                }
                return this.mAssertResultsExpectedValues;
            }
        }
        
        public virtual openApplicationParams openApplicationParams
        {
            get
            {
                if ((this.mopenApplicationParams == null))
                {
                    this.mopenApplicationParams = new openApplicationParams();
                }
                return this.mopenApplicationParams;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private enterStringAndTwoIntsParams menterStringAndTwoIntsParams;
        
        private AssertResultsExpectedValues mAssertResultsExpectedValues;
        
        private openApplicationParams mopenApplicationParams;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'enterStringAndTwoInts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class enterStringAndTwoIntsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Phillip Wolf' in 'enterFullName' text box
        /// </summary>
        public string UIEnterFullNameEditText = "Phillip Wolf";
        
        /// <summary>
        /// Type '{CapsLock}' in 'enterFullName' text box
        /// </summary>
        public string UIEnterFullNameEditSendKeys = "{CapsLock}";
        
        /// <summary>
        /// Type '10' in 'enterNum1' text box
        /// </summary>
        public string UIEnterNum1EditText = "10";
        
        /// <summary>
        /// Type '10' in 'enterNum2' text box
        /// </summary>
        public string UIEnterNum2EditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertResults'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertResultsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Phillip Wolf' label equals 'Phillip Wolf'
        /// </summary>
        public string UIPhillipWolfTextDisplayText = "Phillip Wolf";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '25' label equals '25'
        /// </summary>
        public string UIItem25TextDisplayText = "25";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '20' label equals '20'
        /// </summary>
        public string UIItem20TextDisplayText = "20";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '100' label equals '100'
        /// </summary>
        public string UIItem100TextDisplayText = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'openApplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class openApplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\myApp\WpfApplication1.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\PhillipWolf\\Desktop\\myApp\\WpfApplication1.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\myApp\WpfApplication1.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Desktop\\myApp\\WpfApplication1.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIEnterFullNameEdit
        {
            get
            {
                if ((this.mUIEnterFullNameEdit == null))
                {
                    this.mUIEnterFullNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIEnterFullNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "enterFullName";
                    this.mUIEnterFullNameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEnterFullNameEdit;
            }
        }
        
        public WpfEdit UIEnterNum1Edit
        {
            get
            {
                if ((this.mUIEnterNum1Edit == null))
                {
                    this.mUIEnterNum1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIEnterNum1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "enterNum1";
                    this.mUIEnterNum1Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEnterNum1Edit;
            }
        }
        
        public WpfEdit UIEnterNum2Edit
        {
            get
            {
                if ((this.mUIEnterNum2Edit == null))
                {
                    this.mUIEnterNum2Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIEnterNum2Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "enterNum2";
                    this.mUIEnterNum2Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEnterNum2Edit;
            }
        }
        
        public WpfButton UIGetMagicNumberButton
        {
            get
            {
                if ((this.mUIGetMagicNumberButton == null))
                {
                    this.mUIGetMagicNumberButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGetMagicNumberButton.SearchProperties[WpfButton.PropertyNames.Name] = "Get Magic Number!";
                    this.mUIGetMagicNumberButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIGetMagicNumberButton;
            }
        }
        
        public WpfText UIPhillipWolfText
        {
            get
            {
                if ((this.mUIPhillipWolfText == null))
                {
                    this.mUIPhillipWolfText = new WpfText(this);
                    #region Search Criteria
                    this.mUIPhillipWolfText.SearchProperties[WpfText.PropertyNames.Name] = "Phillip Wolf";
                    this.mUIPhillipWolfText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPhillipWolfText;
            }
        }
        
        public WpfText UIItem25Text
        {
            get
            {
                if ((this.mUIItem25Text == null))
                {
                    this.mUIItem25Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem25Text.SearchProperties[WpfText.PropertyNames.Name] = "25";
                    this.mUIItem25Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem25Text;
            }
        }
        
        public WpfText UIItem20Text
        {
            get
            {
                if ((this.mUIItem20Text == null))
                {
                    this.mUIItem20Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem20Text.SearchProperties[WpfText.PropertyNames.Name] = "20";
                    this.mUIItem20Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem20Text;
            }
        }
        
        public WpfText UIItem100Text
        {
            get
            {
                if ((this.mUIItem100Text == null))
                {
                    this.mUIItem100Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem100Text.SearchProperties[WpfText.PropertyNames.Name] = "100";
                    this.mUIItem100Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem100Text;
            }
        }
        
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIEnterFullNameEdit;
        
        private WpfEdit mUIEnterNum1Edit;
        
        private WpfEdit mUIEnterNum2Edit;
        
        private WpfButton mUIGetMagicNumberButton;
        
        private WpfText mUIPhillipWolfText;
        
        private WpfText mUIItem25Text;
        
        private WpfText mUIItem20Text;
        
        private WpfText mUIItem100Text;
        
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
}
